// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplicationVentas.Entidades;

#nullable disable

namespace WebApplicationVentas.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplicationVentas.Entidades.Almacene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_registro");

                    b.HasKey("Id");

                    b.ToTable("almacenes", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_registro");

                    b.HasKey("Id");

                    b.ToTable("categorias", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("apellidos");

                    b.Property<string>("Calle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("calle");

                    b.Property<string>("CodigoPostalCiudad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codigo_postal_ciudad");

                    b.Property<string>("Colonia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("colonia");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("telefono");

                    b.HasKey("Id");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.DetalleEntradaProducto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal?>("Cantidad")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("cantidad");

                    b.Property<int?>("IdProducto")
                        .HasColumnType("int")
                        .HasColumnName("id_producto");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("precio");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex("IdProducto");

                    b.ToTable("detalle_entrada_productos", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.DetalleVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionProducto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion_producto");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int")
                        .HasColumnName("id_producto");

                    b.Property<int>("IdVenta")
                        .HasColumnType("int")
                        .HasColumnName("id_venta");

                    b.Property<int?>("MarcaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("precio");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("IdVenta");

                    b.HasIndex("MarcaId");

                    b.ToTable("detalle_ventas", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.EntradaProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaEntradaProducto")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_entrada_producto");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_registro");

                    b.Property<int?>("IdAlmacen")
                        .HasColumnType("int")
                        .HasColumnName("id_almacen");

                    b.Property<int?>("IdProveedor")
                        .HasColumnType("int")
                        .HasColumnName("id_proveedor");

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("decimal(10, 0)")
                        .HasColumnName("sub_total");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(10, 0)")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex("IdAlmacen");

                    b.HasIndex("IdProveedor");

                    b.ToTable("entrada_productos", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_registro");

                    b.HasKey("Id");

                    b.ToTable("marcas", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Negocio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Calle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("calle");

                    b.Property<string>("CodigoPostalCiudad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codigo_postal_ciudad");

                    b.Property<string>("Colonia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("colonia");

                    b.Property<string>("Correo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("correo");

                    b.Property<string>("Logotipo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("logotipo");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Pais")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pais");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefono");

                    b.HasKey("Id");

                    b.ToTable("negocio", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoBarras")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codigo_barras");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_registro");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int")
                        .HasColumnName("id_categoria");

                    b.Property<int>("IdMarca")
                        .HasColumnType("int")
                        .HasColumnName("id_marca");

                    b.Property<string>("Imagen")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("imagen");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("precio");

                    b.Property<int>("StockMaximo")
                        .HasColumnType("int")
                        .HasColumnName("stock_maximo");

                    b.Property<int>("StockMinimo")
                        .HasColumnType("int")
                        .HasColumnName("stock_minimo");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdMarca");

                    b.ToTable("productos", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Proveedore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("apellidos");

                    b.Property<string>("Calle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("calle");

                    b.Property<string>("CodigoPostalCiudad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codigo_postal_ciudad");

                    b.Property<string>("Colonia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("colonia");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_registro");

                    b.Property<int>("IdRubro")
                        .HasColumnType("int")
                        .HasColumnName("id_rubro");

                    b.Property<int>("IdTipoDocumento")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_documento");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefono");

                    b.HasKey("Id");

                    b.HasIndex("IdRubro");

                    b.HasIndex("IdTipoDocumento");

                    b.ToTable("proveedores", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_registro");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Rubro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_registro");

                    b.HasKey("Id");

                    b.ToTable("rubros", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.StockProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdAlmacen")
                        .HasColumnType("int")
                        .HasColumnName("id_almacen");

                    b.Property<int?>("IdProducto")
                        .HasColumnType("int")
                        .HasColumnName("id_producto");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("precio");

                    b.Property<decimal?>("StockActual")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("stock_actual");

                    b.HasKey("Id");

                    b.HasIndex("IdAlmacen");

                    b.HasIndex("IdProducto");

                    b.ToTable("stock_productos", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.TipoDocumentoVentum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_registro");

                    b.HasKey("Id");

                    b.ToTable("tipoDocumentoVenta", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.TiposDocumentosProvCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_registro");

                    b.HasKey("Id");

                    b.ToTable("tipos_documentos_prov_cliente", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("apellidos");

                    b.Property<string>("Correo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("correo");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_registro");

                    b.Property<int>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("id_rol");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefono");

                    b.HasKey("Id");

                    b.HasIndex("IdRol");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_registro");

                    b.Property<int>("IdTipoDocumentoVenta")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_documento_venta");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<string>("NombreCliente")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre_cliente");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoDocumentoVenta");

                    b.HasIndex("IdUsuario");

                    b.ToTable("ventas", (string)null);
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.DetalleEntradaProducto", b =>
                {
                    b.HasOne("WebApplicationVentas.Entidades.Producto", "IdProductoNavigation")
                        .WithMany("DetalleEntradaProductos")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("FK_detalle_entrada_productos_productos");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.DetalleVenta", b =>
                {
                    b.HasOne("WebApplicationVentas.Entidades.Categoria", null)
                        .WithMany("DetalleVenta")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("WebApplicationVentas.Entidades.Venta", "IdVentaNavigation")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("IdVenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_detalle_ventas_ventas");

                    b.HasOne("WebApplicationVentas.Entidades.Marca", null)
                        .WithMany("DetalleVenta")
                        .HasForeignKey("MarcaId");

                    b.Navigation("IdVentaNavigation");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.EntradaProducto", b =>
                {
                    b.HasOne("WebApplicationVentas.Entidades.Almacene", "IdAlmacenNavigation")
                        .WithMany("EntradaProductos")
                        .HasForeignKey("IdAlmacen")
                        .HasConstraintName("FK_entrada_productos_almacenes");

                    b.HasOne("WebApplicationVentas.Entidades.Proveedore", "IdProveedorNavigation")
                        .WithMany("EntradaProductos")
                        .HasForeignKey("IdProveedor")
                        .HasConstraintName("FK_entrada_productos_proveedores");

                    b.Navigation("IdAlmacenNavigation");

                    b.Navigation("IdProveedorNavigation");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Producto", b =>
                {
                    b.HasOne("WebApplicationVentas.Entidades.Categoria", "IdCategoriaNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_productos_categorias");

                    b.HasOne("WebApplicationVentas.Entidades.Marca", "IdMarcaNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("IdMarca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_productos_marcas");

                    b.Navigation("IdCategoriaNavigation");

                    b.Navigation("IdMarcaNavigation");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Proveedore", b =>
                {
                    b.HasOne("WebApplicationVentas.Entidades.Rubro", "IdRubroNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdRubro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_proveedores_rubros");

                    b.HasOne("WebApplicationVentas.Entidades.TiposDocumentosProvCliente", "IdTipoDocumentoNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdTipoDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_proveedores_tipos_documentos_prov_cliente");

                    b.Navigation("IdRubroNavigation");

                    b.Navigation("IdTipoDocumentoNavigation");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.StockProducto", b =>
                {
                    b.HasOne("WebApplicationVentas.Entidades.Almacene", "IdAlmacenNavigation")
                        .WithMany("StockProductos")
                        .HasForeignKey("IdAlmacen")
                        .HasConstraintName("FK_stock_productos_almacenes");

                    b.HasOne("WebApplicationVentas.Entidades.Producto", "IdProductoNavigation")
                        .WithMany("StockProductos")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("FK_stock_productos_productos");

                    b.Navigation("IdAlmacenNavigation");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Usuario", b =>
                {
                    b.HasOne("WebApplicationVentas.Entidades.Rol", "IdRolNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_usuarios_rol");

                    b.Navigation("IdRolNavigation");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Venta", b =>
                {
                    b.HasOne("WebApplicationVentas.Entidades.TipoDocumentoVentum", "IdTipoDocumentoVentaNavigation")
                        .WithMany("Venta")
                        .HasForeignKey("IdTipoDocumentoVenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ventas_tipoDocumentoVenta");

                    b.HasOne("WebApplicationVentas.Entidades.Usuario", "IdUsuarioNavigation")
                        .WithMany("Venta")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ventas_usuarios");

                    b.Navigation("IdTipoDocumentoVentaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Almacene", b =>
                {
                    b.Navigation("EntradaProductos");

                    b.Navigation("StockProductos");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Categoria", b =>
                {
                    b.Navigation("DetalleVenta");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Marca", b =>
                {
                    b.Navigation("DetalleVenta");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Producto", b =>
                {
                    b.Navigation("DetalleEntradaProductos");

                    b.Navigation("StockProductos");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Proveedore", b =>
                {
                    b.Navigation("EntradaProductos");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Rubro", b =>
                {
                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.TipoDocumentoVentum", b =>
                {
                    b.Navigation("Venta");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.TiposDocumentosProvCliente", b =>
                {
                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Usuario", b =>
                {
                    b.Navigation("Venta");
                });

            modelBuilder.Entity("WebApplicationVentas.Entidades.Venta", b =>
                {
                    b.Navigation("DetalleVentas");
                });
#pragma warning restore 612, 618
        }
    }
}
